services:
  database:
    image: postgres:17-alpine
    container_name: mini_notizblock_db_service
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Wert kommt aus .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Wert kommt aus .env
      POSTGRES_DB: ${POSTGRES_DB} # Wert kommt aus .env
    volumes:
      - postgres_db_data:/var/lib/postgresql/data # Hier wird das benannte Volume dem Container-Pfad zugewiesen
    expose:
      - "5432"
    ports:
      - "5433:5432"
    healthcheck: # Hinzugefügt
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build: ./backend
    container_name: backend-api
    restart: unless-stopped
    environment:
      PORT: 3000
      NODE_ENV: development
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER} # Wert kommt aus .env (derselbe wie für den DB-Service)
      DB_PASSWORD: ${POSTGRES_PASSWORD} # Wert kommt aus .env (derselbe wie für den DB-Service)
      DB_NAME: ${POSTGRES_DB} # Wert kommt aus .env (derselbe wie für den DB-Service)
    expose:
      - "3000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend/data:/usr/src/app/data # Dieses Volume ist für die Notizen-Daten nicht mehr primär, kann aber für andere Zwecke bleiben
      - ./backend/src:/usr/src/app/src # Für Hot-Reloading der Backend-Quellen (optional)
      - ./backend/config:/usr/src/app/config # Für Hot-Reloading der Backend-Config (optional)
      - ./backend/package.json:/usr/src/app/package.json
      - ./backend/package-lock.json:/usr/src/app/package-lock.json
    healthcheck: # Hinzugefügt für das Backend
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s # Prüfe alle 30 Sekunden
      timeout: 10s  # Warte maximal 10 Sekunden auf eine Antwort
      retries: 3    # Versuche es 3 Mal, bevor als "unhealthy" markiert wird
      start_period: 30s # Gib dem Container 30 Sekunden Zeit zum Starten, bevor der Healthcheck fehlschlagen kann

  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_URL: /api
    container_name: frontend-app
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend

volumes:
  postgres_db_data: # Hier wird das benannte Volume definiert
    name: mini_notizblock_postgres_data # Optional: Ein spezifischer Name für das Volume auf dem Host